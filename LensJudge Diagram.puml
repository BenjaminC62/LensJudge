@startuml
package lensjudge.runnerbuilder {
    interface IRunnerBuilder {
        + setTestCase(TestCase testCase): void
        + setConstructProblem(ConstructProblem constructProblem): void
        + getTestCase(): TestCase
        + getConstructProblem(): ConstructProblem
        + run() : void
    }

    interface IVerification {
        + isNotEmpty(String pathFileIn): boolean
        + isFileExists(String pathFileIn): boolean
        + verify(InputStream input, String pathFileOut): boolean
    }

    interface IControlProcess {
        + getErrorOutput(): String
        + getStandardOutput(): String
        + startProcess(): void
        + waitForProcess(): int
        + stopProcess(): void
    }

    interface IExecution {
        + execute(String sourceFilePath, String binaryFileName) : ProcessAdapter
    }

    interface ICompilerStrategy {
        + compile(String sourceFileName, String languageSelected) : void
        + isCompatible(String languageSelected) : boolean
        + getBinaryFileName(String sourceFileName) : String
        + executeCompilerCommand(File sourceFile, String binaryFile) : void
    }

    class RunnerBuilder {
        + setTestCase(TestCase testCase): void
        + setConstructProblem(ConstructProblem constructProblem): void
        + getTestCase(): TestCase
        + getConstructProblem(): ConstructProblem
        + run() : void
    }

    class Runner {
        + static Scanner scanner
        - sourceFile : File
        - constructProblem : ConstructProblem
        - compilerStrategy : ICompilerStrategy
        - execution : IExecution
        - verification : IVerification
        + Runner(File sourceFile, TestCase testCase)
        + setTestCase(TestCase testCase): void
        + setConstructProblem(ConstructProblem constructProblem): void
        + getTestCase(): TestCase
        + getConstructProblem(): ConstructProblem
        + run(IVerification verification) : void
    }

    class RealVerification {
        + isNotEmpty(String pathFileIn): boolean
        + isFileExists(String pathFileIn): boolean
        + verify(InputStream input, String pathFileOut): boolean
    }

    class CaseVerification {
        + isNotEmpty(String pathFileIn): boolean
        + isFileExists(String pathFileIn): boolean
        + verify(InputStream input, String pathFileOut): boolean
    }

    class StrictVerification {
        + isNotEmpty(String pathFileIn): boolean
        + isFileExists(String pathFileIn): boolean
        + verify(InputStream input, String pathFileOut): boolean
    }

    class OrderVerification {
        + isNotEmpty(String pathFileIn): boolean
        + isFileExists(String pathFileIn): boolean
        + verify(InputStream input, String pathFileOut): boolean
    }

    class OneOfSeveralVerification {
        + isNotEmpty(String pathFileIn): boolean
        + isFileExists(String pathFileIn): boolean
        + verify(InputStream input, String pathFileOut): boolean
    }

    class ProcessAdapter {
        - ProcessBuilder processBuilder
        - Process process
        - static final String PROCESSNOTSTARTED
        + ProcessAdapter(String... command)
        + setDirectory(String directory): void
        + startProcess(): void
        + stopProcess(): void
        + getStandardOutput(): String
        + getErrorOutput(): String
        + waitForProcess(): int
    }

    class ProcessDecorator {
        - IControlProcess processControl
        + ProcessDecorator(IControlProcess processControl)
        + startProcess(): void
        + stopProcess(): void
        + getStandardOutput(): String
        + getErrorOutput(): String
        + waitForProcess(): int
    }

    class TimeProcessDecorator {
        - long timeLimitMs
        + TimeProcessDecorator(IControlProcess processControl, long timeLimitMs)
    }

    class ConstructProblem {
        - List<TestCase> testCases
        - int timeLimit
        - int memoryLimit
        - CaseVerification verification
        + iterator(): Iterator<TestCase>
        + forEach(Consumer<? super TestCase> action): void
        + spliterator(): Spliterator<TestCase>
        - ConstructProblem()
        + getTimeLimit(): int
        + getMemoryLimit(): int
        + getVerification(): CaseVerification
        + static newInstance(): ConstructProblem
        + withTestCase(TestCase... testCases): ConstructProblem
        + withTimeLimit(int timeLimit): ConstructProblem
        + withMemoryLimit(int memoryLimit): ConstructProblem
        + withVerification(CaseVerification verification): ConstructProblem
        + build(): ConstructProblem
    }

    class TestCase {
        - fileName : String
        - fileIn : File
        - fileOut : File
        - pathFileIn : String
        - pathFileOut : String
        + TestCase(String Name, File fileIn, File fileOut)
        + getFileName(): String
        + getPathFileIn(): String
        + getPathFileOut(): String
        + exists(): boolean
    }

    class ExecutionC {
        + execute(String sourceFilePath, String binaryFileName): ProcessAdapter
    }

    class ExecutionCPP {
        + execute(String sourceFilePath, String binaryFileName): ProcessAdapter
    }

    class ExecutionJava {
        + execute(String sourceFilePath, String binaryFileName): ProcessAdapter
    }

    class ExecutionPy {
        + execute(String sourceFilePath, String binaryFileName): ProcessAdapter
    }

    class CompilerC {
        + isCompatible(String languageSelected) : boolean
        + getBinaryFileName(String sourceFileName) : String
        + executeCompilerCommand(File sourceFile, String binaryFile) : void
        # getLanguage() : String
    }

    class CompilerCPP {
        + isCompatible(String languageSelected) : boolean
        + getBinaryFileName(String sourceFileName) : String
        + executeCompilerCommand(File sourceFile, String binaryFile) : void
        # getLanguage() : String
    }

    class CompilerJava {
        + isCompatible(String languageSelected) : boolean
        + getBinaryFileName(String sourceFileName) : String
        + executeCompilerCommand(File sourceFile, String binaryFile) : void
        # getLanguage() : String
    }

    class CompilerPython {
        + isCompatible(String languageSelected) : boolean
        + getBinaryFileName(String sourceFileName) : String
        + executeCompilerCommand(File sourceFile, String binaryFile) : void
        # getLanguage() : String
    }

    class CompilerStrategy{
        - strategy : ICompilerStrategy
        + setStrategy(ICompilerStrategy strategy) : void
        + compile(File sourceFileName, String languageSelected) : void
    }


    IRunnerBuilder <|.. RunnerBuilder
    IRunnerBuilder <|.. Runner
    IVerification <|.. RealVerification
    IVerification <|.. CaseVerification
    IVerification <|.. StrictVerification
    IVerification <|.. OrderVerification
    IVerification <|.. OneOfSeveralVerification
    IControlProcess <|.. ProcessAdapter
    IControlProcess <|.. ProcessDecorator
    IControlProcess <|-- TimeProcessDecorator
    Iterable <|.. ConstructProblem
    IExecution <|.. ExecutionC
    IExecution <|.. ExecutionCPP
    IExecution <|.. ExecutionJava
    IExecution <|.. ExecutionPy
    CompilerStrategy <|-- CompilerC
    CompilerStrategy <|-- CompilerCPP
    CompilerStrategy <|-- CompilerJava
    CompilerStrategy <|-- CompilerPython
    ICompilerStrategy <|.. CompilerStrategy
    IRunnerBuilder <.. IExecution
    IRunnerBuilder <.. IVerification
    IRunnerBuilder <.. IControlProcess
    IRunnerBuilder <.. ICompilerStrategy
    ConstructProblem <.. TestCase
    IRunnerBuilder <.. TestCase



@enduml